/*
 * PropertyEditingDialog.java
 *
 * Created on 25 March 2002, 16:39
 */

package gilbert.ui;
import java.lang.reflect.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import org.apache.log4j.*;

/**
 * Allows to set the Properties of a given object.
 *
 * @author Daniel Hahn
 * @version CVS $Revision$
 */
public class PropertyEditingDialog extends javax.swing.JDialog {
    /// The object with the properties to set.
    protected Object myObject;
    /// Array with the Text fields
    protected JTextField[] setFields;
    /// Array with the methods
    protected Method[] setMethods;
    /// Logger for this class
    protected Logger logger = Logger.getLogger(this.getClass());
    
    /** Creates new form PropertyEditingDialog */
    public PropertyEditingDialog(java.awt.Frame parent, boolean modal, Object o) {
        super(parent, modal);
        myObject = o;
        initComponents();
        initForm();
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        propertyPanel = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel1.add(cancelButton);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        jPanel1.add(acceptButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(propertyPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        applyChanges();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_acceptButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * Initializes the form.
     */
    public void initForm() {
        Class oClass = myObject.getClass();
        setTitle("Edit properties of " + oClass.getName());
        Method[] meths = oClass.getMethods();
        Vector setters = new Vector();
        for (int i=0 ; i < meths.length ; i++) {
            if (meths[i].getName().startsWith("set")) {
                setters.add(meths[i]);
            }
        }
        propertyPanel.setLayout(new GridLayout(setters.size(), 2));
        setFields = new JTextField[setters.size()];
        setMethods = new Method[setters.size()];
        Enumeration setterE = setters.elements();
        for (int i=0 ; setterE.hasMoreElements() ; i++) {
            Method current = (Method) setterE.nextElement();
            String currentName = current.getName().substring(3); // Name of the property
            String currentValue = "";
            try {
                Method getter = myObject.getClass().getMethod("get" + currentName, null);
                Object result = getter.invoke(myObject, null);
                currentValue = result.toString();
            } catch (NoSuchMethodException e) {
                if (logger.isDebugEnabled()) logger.debug("Getter not found for: " + currentName);
            } catch (IllegalAccessException e) {
                logger.error("Error executing getter for " + currentName, e);
            } catch (InvocationTargetException e) {
                logger.error("Error executing getter for " + currentName, e);
            }
            JTextField setterField = new JTextField(currentValue);
            setFields[i] = setterField;
            setMethods[i] = current;
            propertyPanel.add(new JLabel(currentName));
            propertyPanel.add(setterField);
        }
        
    }
    
    /**
     * Applies the changes made in the form.
     */
    private void applyChanges() {
        for (int i=0 ; i < setFields.length ; i++) {
            // Check for parameter type and create object
            Class[] pTypes = setMethods[i].getParameterTypes();
            Class pType = null;
            if ((pTypes != null) && (pTypes.length != 0)) {
                pType = pTypes[0];
            }
            Object pObj = null;
            if (pType == null) {
                logger.warn("Setter method with empty parameter list.");
            } else if (pType.equals(String.class)) {
                pObj = setFields[i].getText();
            } else if (pType.isPrimitive()) {
                String pName = pType.getName();
                try {
                    if (pName.equals("double")) {
                        pObj = new Double(setFields[i].getText());
                    } else if (pName.equals("float")) {
                        pObj = new Float(setFields[i].getText());
                    } else if (pName.equals("long")) {
                        pObj = new Long(setFields[i].getText());
                    } else if (pName.equals("int")) {
                        pObj = new Integer(setFields[i].getText());
                    } else if (pName.equals("boolean")) {
                        pObj = new Boolean(setFields[i].getText());
                    } else {
                        logger.info("Cannot set primitive of type: " + pName);
                    }
                } catch (NumberFormatException e) {
                    logger.debug("Wrong number format " + e.getMessage());
                }
            } else {
                logger.info("Cannot set property of type: " + pType.getName());
            }
            if (pObj != null) {
                Object[] pObjL = { pObj };
                try {
                    setMethods[i].invoke(myObject, pObjL);
                } catch (IllegalAccessException e) {
                    logger.warn("Could not call setter: " + e.getMessage(), e);
                } catch (InvocationTargetException e) {
                    logger.warn("Could not call setter: " + e.getMessage(), e);
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel propertyPanel;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    // End of variables declaration//GEN-END:variables
    
}
