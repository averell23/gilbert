/*
 * GilUI.java
 *
 * Created on 20 March 2002, 13:42
 */

package gilbert.ui;
import java.util.*;
import javax.swing.*;
import org.apache.log4j.*;
import gilbert.extractor.*;
import java.io.*;
import gilbert.io.*;

/**
 * Main Window for the Gil UI.
 *
 * @author  Daniel Hahn
 * @version CVS $Revision$
 */
public class GilUI extends javax.swing.JFrame {
    /// Logger for this class
    Logger logger = Logger.getLogger(this.getClass());
    /// Write to file property.
    boolean writeToFile = false;
    /// If the log window should show
    boolean logToWindow = false;
    
    /** Creates new form GilUI */
    public GilUI() {
        initComponents();
        initForm();
        this.setJMenuBar(menuBar);
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exit = new javax.swing.JMenuItem();
        extractorCombo = new javax.swing.JComboBox();
        extPropsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        refList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        refPropsButton = new javax.swing.JButton();
        refFilterButton = new javax.swing.JButton();
        refAddButton = new javax.swing.JButton();
        refDelButton = new javax.swing.JButton();
        sourceTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        extFilterButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        writeToFileCheckBox = new javax.swing.JCheckBox();
        outputFileTextField = new javax.swing.JTextField();
        outputBrowseButton = new javax.swing.JButton();
        logWindowCheckBox = new javax.swing.JCheckBox();

        fileMenu.setText("Menu");
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        fileMenu.add(exit);
        menuBar.add(fileMenu);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gil UI");
        setName("Gil UI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(extractorCombo, gridBagConstraints);

        extPropsButton.setText("Properties");
        extPropsButton.setActionCommand("exProps");
        extPropsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extPropsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(extPropsButton, gridBagConstraints);

        refList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(refList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 0));

        refPropsButton.setText("Properties");
        refPropsButton.setActionCommand("propsRef");
        refPropsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refPropsButtonActionPerformed(evt);
            }
        });

        jPanel2.add(refPropsButton);

        refFilterButton.setText("Filters");
        refFilterButton.setActionCommand("refFilter");
        refFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refFilterButtonActionPerformed(evt);
            }
        });

        jPanel2.add(refFilterButton);

        refAddButton.setText("Add");
        refAddButton.setActionCommand("addRef");
        refAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refAddButtonActionPerformed(evt);
            }
        });

        jPanel2.add(refAddButton);

        refDelButton.setText("Delete");
        refDelButton.setActionCommand("delRef");
        refDelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refDelButtonActionPerformed(evt);
            }
        });

        jPanel2.add(refDelButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(sourceTextField, gridBagConstraints);

        jLabel1.setText("Source:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        browseButton.setText("Browse...");
        browseButton.setActionCommand("browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(browseButton, gridBagConstraints);

        extFilterButton.setText("Filters");
        extFilterButton.setActionCommand("extFilter");
        extFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extFilterButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(extFilterButton, gridBagConstraints);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jPanel3.add(exitButton);

        runButton.setText("Run!");
        runButton.setActionCommand("run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jPanel3.add(runButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        writeToFileCheckBox.setText("Write to file:");
        writeToFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToFileCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(writeToFileCheckBox, gridBagConstraints);

        outputFileTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 0, 5);
        getContentPane().add(outputFileTextField, gridBagConstraints);

        outputBrowseButton.setText("Browse...");
        outputBrowseButton.setEnabled(false);
        outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBrowseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(outputBrowseButton, gridBagConstraints);

        logWindowCheckBox.setText("Log to Window");
        logWindowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logWindowCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(logWindowCheckBox, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void logWindowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logWindowCheckBoxActionPerformed
        logToWindow = logWindowCheckBox.isSelected();
    }//GEN-LAST:event_logWindowCheckBoxActionPerformed
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        exitApp();
    }//GEN-LAST:event_exitButtonActionPerformed
    
    private void outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputBrowseButtonActionPerformed
        browseOutput();
    }//GEN-LAST:event_outputBrowseButtonActionPerformed
    
    private void writeToFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToFileCheckBoxActionPerformed
        boolean state = writeToFileCheckBox.isSelected();
        writeToFile = state;
        outputBrowseButton.setEnabled(state);
        outputFileTextField.setEnabled(state);
    }//GEN-LAST:event_writeToFileCheckBoxActionPerformed
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        runExtraction();
    }//GEN-LAST:event_runButtonActionPerformed
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        browseSource();
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void refFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refFilterButtonActionPerformed
        Object selection = refList.getSelectedValue();
        if (selection != null) {
            FilterDialog filterDialog = new FilterDialog(this, true, selection);
            filterDialog.show();
        }
    }//GEN-LAST:event_refFilterButtonActionPerformed
    
    private void extFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extFilterButtonActionPerformed
        FilterDialog filterDialog = new FilterDialog(this, true, extractorCombo.getSelectedItem());
        filterDialog.show();
    }//GEN-LAST:event_extFilterButtonActionPerformed
    
    private void refPropsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refPropsButtonActionPerformed
        refinerProperties();
    }//GEN-LAST:event_refPropsButtonActionPerformed
    
    private void extPropsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extPropsButtonActionPerformed
        extractorProperties();
    }//GEN-LAST:event_extPropsButtonActionPerformed
    
    private void refDelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refDelButtonActionPerformed
        refinerDel();
    }//GEN-LAST:event_refDelButtonActionPerformed
    
    private void refAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refAddButtonActionPerformed
        refinerAdd();
    }//GEN-LAST:event_refAddButtonActionPerformed
    
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        exitApp();
    }//GEN-LAST:event_exitActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exitApp();
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        PropertyConfigurator.configure("gilbert/ui/log4j.properties");
        new GilUI().show();
    }
    
    /**
     * Initializes the form.
     */
    private void initForm() {
        Enumeration extractorE = DataHandler.getExtractors().elements();
        while (extractorE.hasMoreElements()) {
            Class current = (Class) extractorE.nextElement();
            try {
                Object cE = current.newInstance();
                extractorCombo.addItem(cE);
            } catch (InstantiationException e) {
                logger.warn("Could not instanciate object of " + current.getName(), e);
            } catch (IllegalAccessException e) {
                logger.warn("Could not instanciate object of " + current.getName(), e);
            }
        }
        DefaultListModel listModel = new DefaultListModel();
        refList.setModel(listModel);
    }
    
    /**
     * Tries to add a refiner.
     */
    private void refinerAdd() {
        ClassSelectDialog refSel = new ClassSelectDialog(this, true, DataHandler.getRefiners());
        refSel.show();
        if (!refSel.isCancelled() && refSel != null) {
            DefaultListModel lm = (DefaultListModel) refList.getModel();
            lm.addElement(refSel.getSelection());
        }
    }
    
    /**
     * Deletes an Refiner from the list.
     */
    private void refinerDel() {
        DefaultListModel lm = (DefaultListModel) refList.getModel();
        lm.removeElementAt(refList.getSelectedIndex());
    }
    
    /**
     * Try to configure the properties of an extractor.
     */
    private void extractorProperties() {
        Object selO = extractorCombo.getSelectedItem();
        PropertyEditingDialog editDialog = new PropertyEditingDialog(this, true, selO);
        editDialog.show();
    }
    
    /**
     * Opens a file browser to select the input source.
     */
    private void browseSource() {
        SimpleFileFilter filter = new SimpleFileFilter("xml", "XML Files");
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(filter);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            sourceTextField.setText(chooser.getSelectedFile().toURI().toString());
        }
    }
    
    /**
     * Opens a file browser to select the output file.
     */
    private void browseOutput() {
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            outputFileTextField.setText(chooser.getSelectedFile().getPath());
        }
    }
    
    /**
     * Run the actual Extraction.
     */
    private void runExtraction() {
        logger.info("Entering Extraction call.");
        ExtractingChain xChain = new ExtractingChain(sourceTextField.getText(),
        (Extractor) extractorCombo.getSelectedItem());
        DefaultListModel lm = (DefaultListModel) refList.getModel();
        Enumeration refE = lm.elements();
        while (refE.hasMoreElements()) {
            xChain.addRefiner((Refiner) refE.nextElement());
        }
        logger.debug("Chain created.");
        BufConnectOutputStream xOut = new BufConnectOutputStream();
        xChain.setOutputStream(xOut);
        Layout l4jLayout = new PatternLayout("%d [%t] %-5p %c %x - %m%n");
        BufConnectOutputStream logBuf = new BufConnectOutputStream();
        Writer logWrite = new OutputStreamWriter(logBuf);
        Logger extLogger = Logger.getLogger("gilbert.extractor");
        extLogger.addAppender(new WriterAppender(l4jLayout, logWrite));
        try {
            logger.debug("Connecting Data streams.");
            BufConnectInputStream xIn = new BufConnectInputStream(xOut);
            InputStreamReader xRead = new InputStreamReader(xIn);
            Reader logRead = new InputStreamReader(new BufConnectInputStream(logBuf));
            
            BufferedWriter outFile = null;
            if (writeToFile) {
                String pathname = outputFileTextField.getText();
                if ((pathname == null) || (pathname.equals(""))) {
                    JOptionPane.showMessageDialog(this, 
                                                  "No filename for writing out.",
                                                  "Error",
                                                  JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                File file = new File(pathname);
                boolean append = false;
                if (file.exists()) {
                    String cancel = "Cancel";
                    String options[] = { "Append", "Overwrite", cancel };
                    int retVal = JOptionPane.showOptionDialog(this,
                                                              "The output file already exists.",
                                                              "File Exists",
                                                               JOptionPane.YES_NO_CANCEL_OPTION,
                                                               JOptionPane.QUESTION_MESSAGE,
                                                               null,
                                                               options,
                                                               cancel
                    );
                    if (retVal == 0) append = true;
                    else if (retVal != 1) return;
                }
                FileWriter fw = null;
                try {
                    fw = new FileWriter(file, append);
                    if (logger.isDebugEnabled()) logger.debug("Append is " + append);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this,
                                                  "The output file cannot be opened.\n"
                                                  + "(" + e.getMessage() + ")",
                                                  "File open error.",
                                                  JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                outFile = new BufferedWriter(fw);
            }
            logger.debug("Firing Extraction Frame.");
            TextOutputFrame xFrame = new TextOutputFrame(xRead, outFile);
            xFrame.setTitle("Extraction output");
            xFrame.go();
            logger.debug("Extraction Frame running.");
            
            if (logToWindow) {
                logger.debug("Firing Log Frame");
                TextOutputFrame logFrame = new TextOutputFrame(logRead, null);
                logFrame.setTitle("Log output");
                logFrame.go();
                logger.debug("Log Frame running.");
            }
            
            logger.info("Starting Extractor Run");
            xChain.start();
        } catch (IOException e) {
            logger.error("Cannot extractot: I/O error.", e);
        }
    }
    
    /**
     * Try to configure the properties of an refiner.
     */
    private void refinerProperties() {
        Object selO = refList.getSelectedValue();
        if (selO != null) {
            PropertyEditingDialog editDialog = new PropertyEditingDialog(this, true, selO);
            editDialog.show();
        }
    }
    
    /**
     * Shuts down the application
     */
    private void exitApp() {
        System.exit(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton outputBrowseButton;
    private javax.swing.JButton refFilterButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField sourceTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.JButton refPropsButton;
    private javax.swing.JButton extPropsButton;
    private javax.swing.JButton refAddButton;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton runButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox writeToFileCheckBox;
    private javax.swing.JCheckBox logWindowCheckBox;
    private javax.swing.JList refList;
    private javax.swing.JButton extFilterButton;
    private javax.swing.JButton refDelButton;
    private javax.swing.JComboBox extractorCombo;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
}
